# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Main_Window.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from Password_Dialog import Ui_Dialog
import os
# import emoji
# import tkinter as tk
# from tkinter import filedialog
import Open_edxx as Op_ed
import DCM_Convert as DCM_Convert
from Periphery import Counter
from Periphery import Options

class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(502, 315)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.folderbutton = QtWidgets.QPushButton(self.centralwidget)
        self.folderbutton.setGeometry(QtCore.QRect(360, 10, 101, 23))
        self.folderbutton.setCheckable(True)
        self.folderbutton.setObjectName("folderbutton")
        self.filebutton = QtWidgets.QPushButton(self.centralwidget)
        self.filebutton.setGeometry(QtCore.QRect(20, 10, 101, 23))
        self.filebutton.setCheckable(True)
        self.filebutton.setObjectName("filebutton")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(10, 40, 481, 231))
        self.plainTextEdit.setObjectName("plainTextEdit")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 502, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpen = QtWidgets.QAction(MainWindow)
        self.actionOpen.setObjectName("actionOpen")
        self.actionConvert_Folder = QtWidgets.QAction(MainWindow)
        self.actionConvert_Folder.setCheckable(True)
        self.actionConvert_Folder.setObjectName("actionConvert_Folder")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionVersion = QtWidgets.QAction(MainWindow)
        self.actionVersion.setObjectName("actionVersion")
        self.actionConvert_file = QtWidgets.QAction(MainWindow)
        self.actionConvert_file.setCheckable(True)
        self.actionConvert_file.setObjectName("actionConvert_file")
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionConvert_file)
        self.menuFile.addAction(self.actionConvert_Folder)
        self.menuFile.addAction(self.actionExit)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionVersion)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # action menu list
        self.actionConvert_file.triggered.connect(self.token_password)  # if triggered call a function
        self.actionConvert_Folder.triggered.connect(self.token_password)
        # push button list
        self.filebutton.clicked.connect(self.token_password)
        self.folderbutton.clicked.connect(self.token_password)
        #show version information
        self.actionVersion.triggered.connect(self.popup_version)
        # exit app
        self.actionExit.triggered.connect(app.quit)
        # password and edxx-file info variable
        self.psw = ""
        self.file_name_edxx = ""
        self.file_name_dcm = ""
        self.file_names_edxx = []
        self.parameter_counter = Counter(0, 0, 0, 0)
        self.print_option = Options("%1.3f", "", True, "")
        self.result_text = ""


    ## save Token password
    def token_password(self):
        MainWindow.hide()
        Dialog = QtWidgets.QDialog()
        # Ui_Dialog class
        psw_ui = Ui_Dialog()
        psw_ui.setupUi(Dialog)
        Dialog.show()
        rsp = Dialog.exec_()
        psw = ""

        if rsp == QtWidgets.QDialog.Accepted:
            psw = psw_ui.lineEdit.text()
            Dialog.close()
            MainWindow.show()
            self.save_psw(psw)
            if not (self.psw == ""):
                self.choose_edxx()
            self.reset_btn()
        else:
            Dialog.close()
            MainWindow.show()
            self.reset_btn()
            self.psw = ""


    ## save password and chosen edxx
    def save_psw(self, text):
        my_ed_file = Op_ed
        # self.psw = ""
        if (not text):
            self.plainTextEdit.appendPlainText(f'Enter Token password!\U0001F448')
        else:
            self.psw = text


    def choose_edxx(self):
        # Pushbutton and action for single file are activated
        if ((self.filebutton.isChecked() or self.actionConvert_file.isChecked()) and
                (not (self.folderbutton.isChecked())) and
                (not (self.actionConvert_Folder.isChecked()))
        ):
            self.file_name_edxx = Op_ed.open_edxx_file()
            if (self.file_name_edxx == ""):
                self.plainTextEdit.appendPlainText(f'Please choose an edxx file \U0001F64F')
            else:
                self.plainTextEdit.appendPlainText(f'\U0001F311-----------------\U0001F312-----------------'
                                                   f'\U0001F313-----------------\U0001F314-----------------\U0001F315')
                self.plainTextEdit.appendPlainText(f'\U00002693 Edxx file is chosen with')
                self.plainTextEdit.appendPlainText(f'   {self.file_name_edxx}. \U0001F44D')
                try:
                    # self.plainTextEdit.appendPlainText(f'{self.psw}')
                    # Call converting
                    self.parameter_counter, self.result_text, self.file_name_dcm = DCM_Convert.edxx2dcm(self.psw,
                                                                                                        self.file_name_edxx)
                    # DCM path name
                    self.plainTextEdit.appendPlainText(f'\U0001F6A2 {self.result_text}. \U0001F44D')
                    # DCM file name
                    self.plainTextEdit.appendPlainText(f'\U0001F6F3 {self.file_name_dcm} is created with')
                    self.show_result(self.parameter_counter)
                except Exception as exception:
                    self.plainTextEdit.appendPlainText(f'\U0001F51E Convert failed! Error information from MAN interface:\U0001F4A9\U0001F4A9\n'
                                                       f'{exception}\n\U0001F51E Wrong token password?\U0001F92E\U0001F92E')
        # Pushbutton and action for folder are activated
        elif ((self.folderbutton.isChecked() or self.actionConvert_Folder.isChecked()) and
              (not (self.filebutton.isChecked())) and
              (not (self.actionConvert_file.isChecked()))
        ):
            self.file_names_edxx = Op_ed.open_file_in_folder()
            # try need use of loop
            if (self.file_names_edxx == []):
                self.plainTextEdit.appendPlainText(f'No edxx file in the chosen folder \U0001F4A9')
            else:
                self.plainTextEdit.appendPlainText(f'\U0001F311-----------------\U0001F312-----------------'
                                                   f'\U0001F313-----------------\U0001F314-----------------\U0001F315')
                self.plainTextEdit.appendPlainText(f'\U00002693 Edxx folder is chosen with')
                self.plainTextEdit.appendPlainText(f'   {os.path.split(self.file_names_edxx[0])[0]}  \U0001F44D')
                self.plainTextEdit.appendPlainText(f'---------------------------------------------'
                                                   f'---------------------------------------------')
                for fil in self.file_names_edxx:
                    # Converting loop
                    try:
                        self.parameter_counter, self.result_text, self.file_name_dcm = DCM_Convert.edxx2dcm(self.psw,
                                                                                                    fil)
                        # DCM path name
                        self.plainTextEdit.appendPlainText(f'\U0001F6A2 {self.result_text}. \U0001F44D')
                        # DCM file name
                        self.plainTextEdit.appendPlainText(f'\U0001F6F3 {self.file_name_dcm} is created with')
                        self.show_result(self.parameter_counter)
                        self.plainTextEdit.appendPlainText(f'---------------------------------------------'
                                                           f'---------------------------------------------')
                    except Exception as exception:
                        self.plainTextEdit.appendPlainText(
                            f'\U0001F51E Convert failed! Error information from MAN interface:\U0001F4A9\U0001F4A9\n'
                            f'{exception}\n\U0001F51E Wrong token password?\U0001F92E\U0001F92E')
                        self.plainTextEdit.appendPlainText(f'---------------------------------------------'
                                                           f'---------------------------------------------')
            # self.plainTextEdit.insertPlainText(self.file_names_edxx[0])
        else:
            self.plainTextEdit.appendPlainText(f'--> No action was chosen! \U0001F4A9')


    def show_result(self, parameter_num = Counter(0,0,0,0)):
        self.plainTextEdit.appendPlainText(f'   Number of value labels: {parameter_num.num_single_value_label}.')
        self.plainTextEdit.appendPlainText(f'   Number of boolean labels: {parameter_num.num_boolean_label}.')
        self.plainTextEdit.appendPlainText(f'   Number of curve labels: {parameter_num.num_curve_label}.')
        self.plainTextEdit.appendPlainText(f'   Number of map labels: {parameter_num.num_map_label}')
        self.plainTextEdit.appendPlainText(f'Conversion is done! \U0001F308')

    def reset_btn(self):
        self.filebutton.setChecked(False)
        self.folderbutton.setChecked(False)
        self.actionConvert_file.setChecked(False)
        self.actionConvert_Folder.setChecked(False)


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "FDS Convertor 101"))
        self.folderbutton.setStatusTip(_translate("MainWindow", "Convert all files in the chosen folder"))
        self.folderbutton.setText(_translate("MainWindow", "Convert folder"))
        self.filebutton.setStatusTip(_translate("MainWindow", "Convert the chosen file"))
        self.filebutton.setText(_translate("MainWindow", "Convert file"))
        self.plainTextEdit.setPlainText(_translate("MainWindow", "0-Token is going to save your day \U0001F64C"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionOpen.setText(_translate("MainWindow", "Choose File"))
        self.actionConvert_Folder.setText(_translate("MainWindow", "Convert Folder"))
        self.actionConvert_Folder.setStatusTip(_translate("MainWindow", "Convert all files in the chosen folder"))
        self.actionConvert_Folder.setShortcut(_translate("MainWindow", "Ctrl+X"))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionExit.setShortcut(_translate("MainWindow", "Ctrl+C"))
        self.actionVersion.setText(_translate("MainWindow", "Version"))
        self.actionConvert_file.setText(_translate("MainWindow", "Convert file"))
        self.actionConvert_file.setStatusTip(_translate("MainWindow", "Convert the chosen file"))
        self.actionConvert_file.setShortcut(_translate("MainWindow", "Ctrl+Y"))


    # def clicked(self, text):
    #     # cursor = QtGui.QTextCursor(self.plainTextEdit.document())
    #     # cursor.setPosition()
    #     # self.plainTextEdit.setTextCursor(cursor)
    #     self.plainTextEdit.insertPlainText(f'{text}\n')




    def popup_version(self):
        version = "v1.0.0"
        msg = QMessageBox()
        msg.setWindowTitle("Version information")
        msg.setText(version)
        msg.setIcon(QMessageBox.Information)
        msg.setStandardButtons(QMessageBox.Cancel)
        msg.setDetailedText("Edxx2dcm converter\ndesigned by qixiong.li@man-es.com in 2021")
        # msg.setInformativeText("Qixiong.li@man-es.com").
        # msg.adjustSize()
        # msg.setDefaultButton(QMessageBox.Ignore)
        # msg.buttonClicked.connect(self.popup_button)
        msg.exec_()

    # def popup_password(self):
    #     pass

#     save the information from show_version
#     def popup_button(self, i):
#         print(i.text())

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
